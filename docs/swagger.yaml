basePath: /
definitions:
  dto.CreateGroupRequest:
    properties:
      group:
        example: 221-352
        type: string
    required:
    - group
    type: object
  dto.CreateGroupResponse:
    properties:
      uuid:
        example: c555b9e8-0d7a-11f0-adcd-20114d2008d9
        type: string
    type: object
  dto.CreateLocationRequest:
    properties:
      name:
        example: Автозаводская
        type: string
    required:
    - name
    type: object
  dto.CreateLocationResponse:
    properties:
      uuid:
        example: c555b9e8-0d7a-11f0-adcd-20114d2008d9
        type: string
    type: object
  dto.GetGroupsResponse:
    properties:
      groups:
        items:
          $ref: '#/definitions/models.Group'
        type: array
    required:
    - groups
    type: object
  dto.GetLocationsResponse:
    properties:
      locations:
        items:
          $ref: '#/definitions/models.Location'
        type: array
    required:
    - locations
    type: object
  dto.UpdateGroupRequest:
    properties:
      group:
        example: 221-352
        type: string
    required:
    - group
    type: object
  dto.UpdateLocationRequest:
    properties:
      name:
        example: Автозаводская
        type: string
    required:
    - name
    type: object
  models.Group:
    properties:
      number:
        example: 221-352
        type: string
      uuid:
        example: c555b9e8-0d7a-11f0-adcd-20114d2008d9
        type: string
    type: object
  models.Location:
    properties:
      name:
        type: string
      uuid:
        type: string
    type: object
  v1.ResponseError:
    properties:
      error:
        type: string
      status:
        example: Error
        type: string
    type: object
  v1.ResponseOK:
    properties:
      response: {}
      status:
        example: OK
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: API for schedules
  title: Raspyx
  version: 0.0.1
paths:
  /api/v1/groups:
    get:
      consumes:
      - '*/*'
      description: Get all groups from database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/v1.ResponseOK'
            - properties:
                response:
                  $ref: '#/definitions/dto.GetGroupsResponse'
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ResponseError'
      summary: Getting groups
      tags:
      - group
    post:
      consumes:
      - application/json
      description: Creates a new group in the database and returns its uuid
      parameters:
      - description: Group number
        in: body
        name: group
        required: true
        schema:
          $ref: '#/definitions/dto.CreateGroupRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/v1.ResponseOK'
            - properties:
                response:
                  $ref: '#/definitions/dto.CreateGroupResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ResponseError'
      summary: Creating a new group
      tags:
      - group
  /api/v1/groups/{uuid}:
    delete:
      consumes:
      - '*/*'
      description: Deleting existing group from the database
      parameters:
      - description: Group uuid
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.ResponseOK'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ResponseError'
      summary: Deleting existing group
      tags:
      - group
  /api/v1/groups/number/{number}:
    get:
      consumes:
      - '*/*'
      description: Get group from database with given number
      parameters:
      - description: Group number
        in: path
        name: number
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/v1.ResponseOK'
            - properties:
                response:
                  $ref: '#/definitions/models.Group'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ResponseError'
      summary: Getting group by number
      tags:
      - group
  /api/v1/groups/uuid/{uuid}:
    get:
      consumes:
      - '*/*'
      description: Get group from database with given uuid
      parameters:
      - description: Group uuid
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/v1.ResponseOK'
            - properties:
                response:
                  $ref: '#/definitions/models.Group'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ResponseError'
      summary: Getting group by uuid
      tags:
      - group
    put:
      consumes:
      - application/json
      description: Update group in database
      parameters:
      - description: Group uuid
        in: path
        name: uuid
        required: true
        type: string
      - description: Group
        in: body
        name: group
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateGroupRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.ResponseOK'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ResponseError'
      summary: Updating group
      tags:
      - group
  /api/v1/locations:
    get:
      consumes:
      - '*/*'
      description: Get all locations from database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/v1.ResponseOK'
            - properties:
                response:
                  $ref: '#/definitions/dto.GetLocationsResponse'
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ResponseError'
      summary: Getting locations
      tags:
      - location
    post:
      consumes:
      - application/json
      description: Creates a new location in the database and returns its uuid
      parameters:
      - description: Location name
        in: body
        name: location
        required: true
        schema:
          $ref: '#/definitions/dto.CreateLocationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/v1.ResponseOK'
            - properties:
                response:
                  $ref: '#/definitions/dto.CreateLocationResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ResponseError'
      summary: Creating a new location
      tags:
      - location
  /api/v1/locations/{uuid}:
    delete:
      consumes:
      - '*/*'
      description: Deleting existing location from the database
      parameters:
      - description: Location uuid
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.ResponseOK'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ResponseError'
      summary: Deleting existing location
      tags:
      - location
  /api/v1/locations/name/{name}:
    get:
      consumes:
      - '*/*'
      description: Get location from database with given name
      parameters:
      - description: Location name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/v1.ResponseOK'
            - properties:
                response:
                  $ref: '#/definitions/models.Location'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ResponseError'
      summary: Getting location by name
      tags:
      - location
  /api/v1/locations/uuid/{uuid}:
    get:
      consumes:
      - '*/*'
      description: Get location from database with given uuid
      parameters:
      - description: Location uuid
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/v1.ResponseOK'
            - properties:
                response:
                  $ref: '#/definitions/models.Location'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ResponseError'
      summary: Getting location by uuid
      tags:
      - location
    put:
      consumes:
      - application/json
      description: Update location in database
      parameters:
      - description: Location uuid
        in: path
        name: uuid
        required: true
        type: string
      - description: Location
        in: body
        name: group
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateLocationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.ResponseOK'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.ResponseError'
      summary: Updating location
      tags:
      - location
swagger: "2.0"
